#pragma once
#include "pch.h"
#include "BeginJueXing.h"
#include "globalvar.h"
#define EXIT_THREAD -10

//Ñ¡²ã
int BeginJueXing::ChooseLayer(int layer, CPoint startXY, CPoint endXY, snow *sn, Game *game) {
	if (sn == NULL)
	{
		return 0;
	}
	//×Ô¶¯¾Ü¾øÐüÉÍ
	if (AutoRejectXS(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
	//»ñÈ¡Ä¿±êÎ»ÖÃ
	CString fontLst = _T("Ò¼²ã|·¡²ã|Èþ²ã|ËÁ²ã|Îé²ã|Â½²ã|Æâ²ã|°Æ²ã|¾Á²ã|Ê°²ã");
	CString color_format = _T("4D463D-4D473E");
	double sim = 0.85;
	int dictId = 2;
	//start Ñ¡Ôñ²ã
	Log(_T("Ñ¡Ôñ¾õÐÑ²ãÊý...\r\n"), game);
	switch (layer)
	{
	case 0: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("Ò¼²ã"), color_format, sim, dictId, sn, game, _T("findstr")))
			break;
		else {
			return 0;
		}
	}
	case 1: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("·¡²ã"), color_format, sim, dictId, sn, game, _T("findstr")))
			break;
		else
			return 0;
	}
	case 2: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("Èþ²ã"), color_format, sim, dictId, sn, game, _T("findstr")))
			break;
		else
			return 0;
	}
	case 3: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("ËÁ²ã"), color_format, sim, dictId, sn, game, _T("findstr")))
			break;
		else
			return 0;
	}
	case 4: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("Îé²ã"), color_format, sim, dictId, sn, game, _T("findstr")))
			break;
		else
			return 0;
	}
	case 5: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("Â½²ã"), color_format, sim, dictId, sn, game, _T("findstr")))
			break;
		else
			return 0;
	}
	case 6: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("Æâ²ã"), color_format, sim, dictId, sn, game, _T("findstr")))
			break;
		else
			return 0;
	}
	case 7: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("°Æ²ã"), color_format, sim, dictId, sn, game, _T("findstr")))
			break;
		else
			return 0;
	}
	case 8: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("¾Á²ã"), color_format, sim, dictId, sn, game, _T("findstr"), _T("¾Á|CFC8B8-292B28")))
			break;
		else
			return 0;
	}
	case 9: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("Ê°²ã"), color_format, sim, dictId, sn, game, _T("findstr"), _T("Ê°|CFC8B8-292B28")))
			break;
		else
			return 0;
	}
	default:
		return 0;
	}
	return 1;
}
//µ¥Ë¢Ñ¡Ôñ²ãÊý
int BeginJueXing::SingleChooseLayer(int layer, CPoint startXY, CPoint endXY, snow *sn, Game *game) {
	if (sn == NULL)
	{
		return 0;
	}
	//×Ô¶¯¾Ü¾øÐüÉÍ
	if (AutoRejectXS(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
	//»ñÈ¡Ä¿±êÎ»ÖÃ
	CString fontLst = _T("Ò¼²ã|·¡²ã|Èþ²ã|ËÁ²ã|Îé²ã|Â½²ã|Æâ²ã|°Æ²ã|¾Á²ã|Ê°²ã");
	CString color_format = _T("424243-434243");
	double sim = 0.85;
	int dictId = 3;
	//start Ñ¡Ôñ²ã
	Log(_T("Ñ¡Ôñ¾õÐÑ²ãÊý...\r\n"), game);
	switch (layer)
	{
	case 0: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("Ò¼²ã"), color_format, sim, dictId, sn, game))
			break;
		else {
			return 0;
		}
	}
	case 1: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("·¡²ã"), color_format, sim, dictId, sn, game))
			break;
		else
			return 0;
	}
	case 2: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("Èþ²ã"), color_format, sim, dictId, sn, game))
			break;
		else
			return 0;
	}
	case 3: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("ËÁ²ã"), color_format, sim, dictId, sn, game))
			break;
		else
			return 0;
	}
	case 4: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("Îé²ã"), color_format, sim, dictId, sn, game))
			break;
		else
			return 0;
	}
	case 5: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("Â½²ã"), color_format, sim, dictId, sn, game))
			break;
		else
			return 0;
	}
	case 6: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("Æâ²ã"), color_format, sim, dictId, sn, game))
			break;
		else
			return 0;
	}
	case 7: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("°Æ²ã"), color_format, sim, dictId, sn, game))
			break;
		else
			return 0;
	}
	case 8: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("¾Á²ã"), color_format, sim, dictId, sn, game))
			break;
		else
			return 0;
	}
	case 9: {
		if (findDestSite(startXY, endXY, fontLst, layer, _T("Ê°²ã"), color_format, sim, dictId, sn, game))
			break;
		else
			return 0;
	}
	default:
		return 0;
	}
	return 1;
}
//³éÏó³öÑ¡ÔñÄÄÖ»÷è÷ë·½·¨£¬·½±ãµ÷ÓÃ
int BeginJueXing::WhichToSelect(CPoint startXY, CPoint endXY, CString source_font, snow *sn, Game *game) {
	if (sn == NULL)
	{
		return 0;
	}
	long intX, intY;
	//Ê¹ÓÃ×Ö¿â
	sn->UseDict(3);
	while (1)
	{
		//×Ô¶¯¾Ü¾øÐüÉÍ
		if (AutoRejectXS(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		//¿ªÆôÁË
		if (sn->FindStrFast(startXY.x, startXY.y, endXY.x, endXY.y, source_font, _T("AC9B91-282724"), 0.85, &intX, &intY) != -1) {
			if (DelayPlus(game, sn, 500, 800) == EXIT_THREAD) { return EXIT_THREAD; }
			sn->MoveClick(intX + 10, intY - 20);
			if (DelayPlus(game, sn, 200, 300) == EXIT_THREAD) { return EXIT_THREAD; }
		}
		if (sn->FindStrFast(416, 308, 443, 337, _T("ÓÑ"), _T("E9D3D5-162C2A"), 0.85, &intX, &intY) != -1) {
			Log(_T("³É¹¦½øÈë½çÃæ...\r\n"), game);
			break;
		}
		if (DelayPlus(game, sn, 250, 500) == EXIT_THREAD) { return EXIT_THREAD; }
	}
	return 1;
}
//Ñ¡´òÄÄ¸ö
int BeginJueXing::ChooseMonster(int monster_kind, snow *sn, Game *game) {
	if (sn == NULL)
	{
		return 0;
	}
	int i = 15;
	//¶¨ÒåÒ»Ð©±äÁ¿
	CPoint startXY, endXY;
	CString source_font;
	switch (monster_kind)
	{
		//»ð  AC9B91-282724, 
	case 0: {
		startXY.x = 115, startXY.y = 443;
		endXY.x = 204, endXY.y = 473;
		source_font = _T("Òµ»ðÂÖ");
		Log(_T("Ñ¡Ôñ»ð÷è÷ë...\r\n"), game);
		int resultSelect = WhichToSelect(startXY, endXY, source_font, sn, game);
		if (resultSelect == 1){ break; }
		else if (resultSelect == EXIT_THREAD) { return EXIT_THREAD; }
	}//·ç 279,281,329,396,
	case 1: {
		startXY.x = 342, startXY.y = 443;
		endXY.x = 418, endXY.y = 473;
		source_font = _T("·ç×ª·û");
		Log(_T("Ñ¡Ôñ·ç÷è÷ë...\r\n"), game);
		int resultSelect = WhichToSelect(startXY, endXY, source_font, sn, game);
		if (resultSelect == 1) { break; }
		else if (resultSelect == EXIT_THREAD) { return EXIT_THREAD; }
	}//Ë®  501,279,552,394,
	case 2: {
		startXY.x = 562, startXY.y = 443;
		endXY.x = 647, endXY.y = 473;
		source_font = _T("Ë®ÁéÀð");
		Log(_T("Ñ¡ÔñË®÷è÷ë...\r\n"), game);
		int resultSelect = WhichToSelect(startXY, endXY, source_font, sn, game);
		if (resultSelect == 1) { break; }
		else if (resultSelect == EXIT_THREAD) { return EXIT_THREAD; }
	}//À× 728,269,770,390,
	case 3: {
		startXY.x = 788, startXY.y = 443;
		endXY.x = 877, endXY.y = 473;
		source_font = _T("ÌìÀ×¹Ä");
		Log(_T("Ñ¡ÔñÀ×÷è÷ë...\r\n"), game);
		int resultSelect = WhichToSelect(startXY, endXY, source_font, sn, game);
		if (resultSelect == 1) { break; }
		else if (resultSelect == EXIT_THREAD) { return EXIT_THREAD; }
	}
	default:
		break;
	}
	return 1;
}
//Ñ°¸±±¾
int BeginJueXing::FindJueXing(snow *sn, Game *game) {
	if (sn == NULL)
	{
		return 0;
	}
	//Ê¹ÓÃ×Ö¿â
	sn->UseDict(1);
	//¶¨Òå¾Ö²¿±äÁ¿
	long intX, intY;
	while (1)
	{
		//×Ô¶¯¾Ü¾øÐüÉÍ
		if (AutoRejectXS(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		//µã»÷¾õÐÑ²ÄÁÏ  28,509,101,537,
		if (sn->FindStrFast(9, 506, 130, 538, _T("¾õÐÑ"), _T("C9C3B2-2F302E"), 0.85, &intX, &intY) != -1) {
			Log(_T("µã»÷¾õÐÑ²ÄÁÏ...\r\n"), game);
			if (DelayPlus(game, sn, 20, 30) == EXIT_THREAD) { return EXIT_THREAD; }
			sn->MoveClick(intX + 10, intY - 20);
			if (DelayPlus(game, sn, 1000, 1500) == EXIT_THREAD) { return EXIT_THREAD; }
		}
		if (sn->FindPic(117, 4, 182, 61, _T("¾õÐÑÖ®Ëþ.bmp"), _T("202020"), 0.85, 0, &intX, &intY) != -1)
		{
			Log(_T("³É¹¦½øÈë½çÃæ...\r\n"), game);
			break;
		}
		if (DelayPlus(game, sn, 200, 500) == EXIT_THREAD) { return EXIT_THREAD; }
	}
	return 1;
}
//Ëø¶¨ÕóÈÝ
int BeginJueXing::lockTeam(snow *sn, Game *game) {
	if (sn == NULL)
	{
		return 0;
	}
	//¶¨Òå¾Ö²¿±äÁ¿
	long intX, intY;
	while (1)
	{
		//×Ô¶¯¾Ü¾øÐüÉÍ
		if (AutoRejectXS(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		if (sn->FindPic(411, 415, 452, 454, _T("½âËøÕóÈÝ.bmp"), _T("202020"), 0.9, 0, &intX, &intY) != -1) {
			Log(_T("Ëø¶¨ÕóÈÝ...\r\n"), game);
			if (DelayPlus(game, sn, 500, 800) == EXIT_THREAD) { return EXIT_THREAD; }
			sn->MoveClick(intX + 13, intY + 13);
			if (DelayPlus(game, sn, 200, 300) == EXIT_THREAD) { return EXIT_THREAD; }
			readyFlag = FALSE;
		}
		if (sn->FindPic(411, 415, 452, 454, _T("ÕóÈÝËø¶¨.bmp"), _T("202020"), 0.9, 0, &intX, &intY) != -1) {
			readyFlag = FALSE;
			break;
		}
		if (DelayPlus(game, sn, 500, 800) == EXIT_THREAD) { return EXIT_THREAD; }
	}
	return 1;
}
//½øÈë¸±±¾
int BeginJueXing::EnterJueXing(snow *sn, Game *game) {
	if (sn == NULL)
	{
		return 0;
	}
	//¶¨Òå¾Ö²¿±äÁ¿
	long intX, intY;
	int closingflag = 0;
	while (1)
	{
		//×Ô¶¯¾Ü¾øÐüÉÍ
		if (AutoRejectXS(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		if (sn->FindPic(824, 437, 902, 505, _T("ÌôÕ½ÓùÁé.bmp"), _T("202020"), 0.9, 0, &intX, &intY) != -1) {
			Log(_T("µã»÷ÌôÕ½...\r\n"), game);
			if (DelayPlus(game, sn, 500, 800) == EXIT_THREAD) { return EXIT_THREAD; }
			CPoint pos = sn->RandomOffsetPos(intX, intY, 10, 20);
			sn->MoveClick(pos.x, pos.y);
			if (DelayPlus(game, sn, 200, 500) == EXIT_THREAD) { return EXIT_THREAD; }
		}
		if (readyFlag && (sn->FindPic(832, 393, 941, 536, _T("×¼±¸.bmp|×¼±¸2.bmp"), _T("202020"), 0.85, 0, &intX, &intY) != -1)) {
			Log(_T("µã»÷×¼±¸...\r\n"), game);
			CPoint pos = sn->RandomOffsetPos(intX, intY, 1, 3);
			if (DelayPlus(game, sn, 100, 200) == EXIT_THREAD) { return EXIT_THREAD; }
			sn->MoveClick(pos.x, pos.y);
			if (DelayPlus(game, sn, 1800, 2200) == EXIT_THREAD) { return EXIT_THREAD; }
		}
		if (sn->FindPic(233, 40, 536, 253, _T("Ê¤Àû.bmp|Ê¤Àû1.bmp"), _T("202020"), 0.9, 0, &intX, &intY) != -1) {
			Log(_T("Õ½¶·½áËãÖÐ...\r\n"), game);
			CPoint pos = sn->RandomOffsetPos(798, 436, 5, 10);
			if (DelayPlus(game, sn, 500, 800) == EXIT_THREAD) { return EXIT_THREAD; }
			sn->MoveClick(pos.x, pos.y);
			if (DelayPlus(game, sn, 200, 500) == EXIT_THREAD) { return EXIT_THREAD; }
		}
		if (sn->FindPic(335, 256, 616, 497, _T("»ê.bmp|»ê(µ×²¿).bmp"), _T("202020"), 0.9, 0, &intX, &intY) != -1) {
			if (DelayPlus(game, sn, 500, 800) == EXIT_THREAD) { return EXIT_THREAD; }
			CPoint pos = sn->RandomOffsetPos(798, 436, 5, 10);
			sn->MoveClick(pos.x, pos.y);
			if (DelayPlus(game, sn, 500, 800) == EXIT_THREAD) { return EXIT_THREAD; }
			closingflag = 1;
		}
		if ((closingflag == 1) && (sn->FindPic(335, 256, 616, 497, _T("»ê.bmp|»ê(µ×²¿).bmp"), _T("202020"), 0.9, 0, &intX, &intY) == -1)) {
			Log(_T("½áËã³É¹¦...\r\n"), game);
			break;
		}
		if (sn->FindPic(298, 41, 408, 147, _T("Ê§°Ü.bmp"), _T("202020"), 0.8, 0, &intX, &intY) != -1) {
			if (DelayPlus(game, sn, 500, 800) == EXIT_THREAD) { return EXIT_THREAD; }
			Log(_T("ÌôÕ½Ê§°Ü...\r\n"), game);
			CPoint pos = sn->RandomOffsetPos(798, 429, 1, 5);
			sn->MoveClick(pos.x, pos.y);
			if (DelayPlus(game, sn, 500, 1000) == EXIT_THREAD) { return EXIT_THREAD; }
			break;
		}
		if (DelayPlus(game, sn, 200, 500) == EXIT_THREAD) { return EXIT_THREAD; }
	}
	return 1;
}
//Í¥ÔºÑûÇëºÃÓÑÄ£Ê½
int BeginJueXing::inviteJueXing(long hd, int round, int mode, int layer, CString jc, int mateType, int triple, snow *sn, Game *game) {
	if (sn == NULL)
	{
		return 0;
	}
	//µÈºÃÓÑÊÂ¼þ
	if (DelayPlus(game, sn, 50, 200) == EXIT_THREAD) { return EXIT_THREAD; }
	TeamRelation(waitFlag1, waitFlag2, sn, game);
	if (DelayPlus(game, sn, 50, 200) == EXIT_THREAD) { return EXIT_THREAD; }
	//³õÊ¼»¯×¼±¸±êÖ¾
	readyFlag = TRUE;
	//ÅÐ¶ÏÊÇ·ñÔÚÍ¥Ôº
	if (!IsInYard(sn, game))
	{
		NotInYardTips(hd, sn, game);
		return 0;
	}
	if (DelayPlus(game, sn, 100, 200) == EXIT_THREAD) { return EXIT_THREAD; }
	//×Ô¶¯¿ª¼Ó³É
	CPoint startXY, endXY;
	startXY.x = 269, startXY.y = 25;
	endXY.x = 331, endXY.y = 68;
	if (auto_open_jc(_T("¾õÐÑ"), jc, startXY, endXY, sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
	if (DelayPlus(game, sn, 500, 800) == EXIT_THREAD) { return EXIT_THREAD; }
	//ÅÐ¶ÏÍ¥ÔºÊÇ·ñÕ¹¿ª,ÈôÎ´Õ¹¿ªÊ¹Ö®Õ¹¿ª
	if (showYard(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
	if (DelayPlus(game, sn, 200, 500) == EXIT_THREAD) { return EXIT_THREAD; }
	//µã»÷×é¶Ó
	int resultCombine = CombineTeamAction(sn, game);
	if (resultCombine == 0) {
		Log(_T("ºÜ±§Ç¸£¬Î´ÕÒµ½×é¶Ó°´Å¥...\r\n"), game);
		return 0;
	}
	else if (resultCombine == EXIT_THREAD) { return EXIT_THREAD; }
	if (DelayPlus(game, sn, 200, 500) == EXIT_THREAD) { return EXIT_THREAD; }
	//Ñ¡ÔñÓù»ê
	//»ñÈ¡Ä¿±êÎ»ÖÃ
	CString fontLst = _T("À§ÄÑ|Òµ»ð|·ç×ª|Ë®Áé|ÌìÀ×|Óù»ê|ÈÕÂÖ|ÓÀÉú|ÑýÆø|¾­Ñé|½ð±Ò|ÄêÊÞ|Ê¯¾à|½á½ç|¶ÔÞÄ|»Ø¹é");
	CString color_format = _T("454039-46413A");
	startXY.x = 101, startXY.y = 75;
	endXY.x = 276, endXY.y = 503;
	//ÕÒµ½¾õÐÑ²¢µã»÷
	CString mode_str, targetTagFont;
	if (mode==0)
	{
		mode_str = _T("Òµ»ð");
		targetTagFont = _T("»ð|CFC8B8-292B28");
	}else if (mode == 1) {
		mode_str = _T("·ç×ª");
		targetTagFont = _T("·ç|CFC8B8-292B28");
	}
	else if (mode == 2) {
		mode_str = _T("Ë®Áé");
		targetTagFont = _T("Ë®|CFC8B8-292B28");
	}
	else if (mode == 3) {
		mode_str = _T("ÌìÀ×");
		targetTagFont = _T("À×|CFC8B8-292B28");
	}
	findDestSite(startXY, endXY, fontLst, mode+1, mode_str, color_format, 0.8, 2, sn, game, _T("findstr"), targetTagFont);
	if (DelayPlus(game, sn, 200, 500) == EXIT_THREAD) { return EXIT_THREAD; }
	//Ñ¡²ã
	//Ñ¡Ôñ²ã²¢µã»÷
	startXY.x = 293, startXY.y = 129;
	endXY.x = 442, endXY.y = 432;
	int resultLayer = ChooseLayer(layer, startXY, endXY, sn, game);
	if (resultLayer == 0) {
		Log(_T("Î´ÕÒµ½Ä¿±ê²ãÊý!!!\r\n"), game);
		return 0;
	}
	else if (resultLayer == EXIT_THREAD) { return EXIT_THREAD; }
	if (DelayPlus(game, sn, 200, 500) == EXIT_THREAD) { return EXIT_THREAD; }
	//´´½¨¶ÓÎé--µã»÷ÑûÇë
	if(CreatTeamToInviteUpper(mateType, sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
	int resultCreat = CreatTeamToInviteLower(mateType, sn, game);
	if (resultCreat == 0) {
		Log(_T("´´½¨¶ÓÎéÊ§°Ü!!!\r\n"), game);
		//Î´ÕÒµ½×î½üºÃÓÑ£¬·µ»ØÍ¥Ôººó¹Ø±Õ¼Ó³É
		startXY.x = 269, startXY.y = 25;
		endXY.x = 331, endXY.y = 68;
		returnYard(sn, game);
		if (DelayPlus(game, sn, 200, 500) == EXIT_THREAD) { return EXIT_THREAD; }
		if (auto_close_jc(_T("¾õÐÑ"), jc, startXY, endXY, sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		return 0;
	}else if(resultCreat == EXIT_THREAD){ return EXIT_THREAD; }
	if (DelayPlus(game, sn, 200, 500) == EXIT_THREAD) { return EXIT_THREAD; }
	//¿ªÊ¼Ñ­»·
	int count = 0, stateCode;
	CString count_str;
	while (count < round)
	{
		//×Ô¶¯¾Ü¾øÐüÉÍ
		if (AutoRejectXS(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		//¼ì²âºÃÓÑ¼ÓÈë¶ÓÎé²¢µãÌôÕ½
		if (IsEnterTeam(sn, game, mateType, triple) == EXIT_THREAD) { return EXIT_THREAD; }
		//½øÈë¾õÐÑ¸±±¾
		count_str.Format(_T("%d"), count + 1);
		Log(_T("µÚ") + count_str + _T("ÂÖ¾õÐÑ¿ªÊ¼...\r\n"), game);
		if ((stateCode = InviteEnterEvent(sn, game)) == EXIT_THREAD) { return EXIT_THREAD; }
		if (DelayPlus(game, sn, 200, 500) == EXIT_THREAD) { return EXIT_THREAD; }
		if (stateCode == DEFAULT) { DefalutInvite(sn, game); }
		else if (stateCode == FAIL) { FailEvent(sn, game); }
		count++;
	}
	//Ë¢ÍêÍË³ö
	if (count >= round)
	{
		game->reSetWaitFlag(waitFlag1, waitFlag2);
		Log(_T("ÈÎÎñÒÑÍê³É£¬ÕýÔÚÍË³ö·µ»ØÍ¥Ôº...\r\n"), game);
		if (returnYard(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		if (DelayPlus(game, sn, 600, 1200) == EXIT_THREAD) { return EXIT_THREAD; }
		//×Ô¶¯¹Ø¼Ó³É
		startXY.x = 269, startXY.y = 25;
		endXY.x = 331, endXY.y = 68;
		if (auto_close_jc(_T("¾õÐÑ"), jc, startXY, endXY, sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		if (DelayPlus(game, sn, 1000, 2000) == EXIT_THREAD) { return EXIT_THREAD; }
	}
	return 1;
}
//Í¥Ôº½ÓÊÜÑûÇëÄ£Ê½
int BeginJueXing::BeinvitedJueXing(long hd, int round, CString jc, snow *sn, Game *game) {
	if (sn == NULL)
	{
		return 0;
	}
	//µÈºÃÓÑÊÂ¼þ
	if (DelayPlus(game, sn, 50, 200) == EXIT_THREAD) { return EXIT_THREAD; }
	TeamRelation(waitFlag1, waitFlag2, sn, game);
	if (DelayPlus(game, sn, 50, 200) == EXIT_THREAD) { return EXIT_THREAD; }
	//³õÊ¼»¯×¼±¸±êÖ¾
	readyFlag = TRUE;
	//ÅÐ¶ÏÊÇ·ñÔÚÍ¥Ôº
	if (!IsInYard(sn, game))
	{
		NotInYardTips(hd, sn, game);
		return 0;
	}
	//×Ô¶¯¿ª¼Ó³É
	CPoint startXY, endXY;
	startXY.x = 269, startXY.y = 25;
	endXY.x = 331, endXY.y = 68;
	if (auto_open_jc(_T("¾õÐÑ"), jc, startXY, endXY, sn, game) == EXIT_THREAD){ return EXIT_THREAD; }
	//¿ªÊ¼Ñ­»·
	int count = 0;
	CString count_str;
	while (count < round)
	{
		count_str.Format(_T("%d"), count + 1);
		//×Ô¶¯¾Ü¾øÐüÉÍ
		if (AutoRejectXS(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		Log(_T("µÈ´ýºÃÓÑÑûÇë...\r\n"), game);
		int isReadyClick = ReceiveFriendInvite(sn, game);
		if (isReadyClick == EXIT_THREAD) { return EXIT_THREAD; }
		if (DelayPlus(game, sn, 500, 800) == EXIT_THREAD) { return EXIT_THREAD; }
		Log(_T("µÚ") + count_str + _T("ÂÖ¾õÐÑ¿ªÊ¼...\r\n"), game);
		EnterEvent(sn, game, isReadyClick);
		count++;
	}
	//Ë¢ÍêÍË³ö
	if (count >= round)
	{
		game->reSetWaitFlag(waitFlag1, waitFlag2);
		Log(_T("ÈÎÎñÒÑÍê³É£¬ÕýÔÚÍË³ö·µ»ØÍ¥Ôº...\r\n"), game);
		if (returnYard(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		if (DelayPlus(game, sn, 600, 1200) == EXIT_THREAD) { return EXIT_THREAD; }
		//×Ô¶¯¹Ø¼Ó³É
		startXY.x = 269, startXY.y = 25;
		endXY.x = 331, endXY.y = 68;
		if (auto_close_jc(_T("¾õÐÑ"), jc, startXY, endXY, sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		if (DelayPlus(game, sn, 1000, 2000) == EXIT_THREAD) { return EXIT_THREAD; }
	}
	return 1;
}
//¿ªÊ¼µ¥Ë¢
int BeginJueXing::SingleJueXing(long hd, int round, int monster_kind, int layer, CString jc, snow *sn, Game *game) {
	if (sn == NULL)
	{
		return 0;
	}
	//³õÊ¼»¯×¼±¸±êÖ¾
	readyFlag = TRUE;
	//ÅÐ¶ÏÊÇ·ñÔÚÍ¥Ôº
	if (!IsInYard(sn, game))
	{
		NotInYardTips(hd, sn, game);
		return 0;
	}
	if (DelayPlus(game, sn, 100, 200) == EXIT_THREAD) { return EXIT_THREAD; }
	//×Ô¶¯¿ª¼Ó³É
	CPoint startXY, endXY;
	startXY.x = 269, startXY.y = 25;
	endXY.x = 331, endXY.y = 68;
	if (auto_open_jc(_T("¾õÐÑ"), jc, startXY, endXY, sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
	//Ñ°ÕÒÌ½Ë÷µÆÁý²¢µã»÷
	int result = FindExploreLanTernAndClick(sn, game);
	if (result == 0) {
		InYardNoExploreLanternTips(game);
		return 0;
	}
	else if (result == EXIT_THREAD) { return EXIT_THREAD; }
	if (DelayPlus(game, sn, 200, 500) == EXIT_THREAD) { return EXIT_THREAD; }
	//Ñ°¾õÐÑ
	if(FindJueXing(sn, game) == EXIT_THREAD){ return EXIT_THREAD; }
	if (DelayPlus(game, sn, 500, 600) == EXIT_THREAD) { return EXIT_THREAD; }
	//Ñ¡´òÄÄ¸ö
	int resultChooseMonster = ChooseMonster(monster_kind, sn, game);
	if(resultChooseMonster == EXIT_THREAD) { return EXIT_THREAD; }
	//Ñ¡²ãµã»÷ 
	startXY.x = 109, startXY.y = 103;
	endXY.x = 362, endXY.y = 451;
	int resultSingleChoose = SingleChooseLayer(layer, startXY, endXY, sn, game);
	if (resultSingleChoose == 0) {
		Log(_T("Î´ÕÒµ½Ä¿±ê!!!\r\n"), game);
		return 0;
	}
	else if (resultSingleChoose == EXIT_THREAD) { return EXIT_THREAD; }
	if (DelayPlus(game, sn, 500, 800) == EXIT_THREAD) { return EXIT_THREAD; }
	//Ëø¶¨ÕóÈÝ
	if(lockTeam(sn, game) == EXIT_THREAD){ return EXIT_THREAD; }
	if (DelayPlus(game, sn, 500, 800) == EXIT_THREAD) { return EXIT_THREAD; }
	//¿ªÊ¼Ñ­»·
	int count = 0;
	while (count < round)
	{
		//×Ô¶¯¾Ü¾øÐüÉÍ
		if (AutoRejectXS(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		//½øÈë¾õÐÑ¸±±¾
		CString count_str;
		count_str.Format(_T("%d"), count + 1);
		Log(_T("µÚ") + count_str + _T("ÂÖ¾õÐÑ¿ªÊ¼...\r\n"), game);
		if (EnterJueXing(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		if (DelayPlus(game, sn, 500, 800) == EXIT_THREAD) { return EXIT_THREAD; }
		count++;
	}
	//Ë¢ÍêÍË³ö
	if (count >= round)
	{
		Log(_T("ÈÎÎñÒÑÍê³É£¬ÕýÔÚÍË³ö·µ»ØÍ¥Ôº...\r\n"), game);
		if (returnYard(sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		if (DelayPlus(game, sn, 1000, 1800) == EXIT_THREAD) { return EXIT_THREAD; }
		//×Ô¶¯¹Ø¼Ó³É
		startXY.x = 269, startXY.y = 25;
		endXY.x = 331, endXY.y = 68;
		if (auto_close_jc(_T("¾õÐÑ"), jc, startXY, endXY, sn, game) == EXIT_THREAD) { return EXIT_THREAD; }
		if (DelayPlus(game, sn, 1000, 2000) == EXIT_THREAD) { return EXIT_THREAD; }
	}
	return 1;
}
